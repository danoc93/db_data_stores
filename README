# db_data_stores: Simulate different record storage methods for a relational entity. 
Records are assumed to be 10 bytes long and a tuple contains 100 records. 
Experiments time the different storage logics for different page sizes. 
Great for understanding the advantages of different stores!

==========================

EXECUTABLES
* Located under 'executables', used for 'experiments'.
* To recreate: cd into 'code' -> call make all -> make move.
* Can be re-generated/called individually for whatever purposes, I just put them there to make the experiments faster.

==========================

EXPERIMENTS
* A .sh file was created for each of the individual executables. 
* You simply need to update the root folder for this whole bundle, and they will work smoothly.
* These can be found under the 'experiments' folder.
* You can change these files to add more / less page sizes.
* For most of the experiment files we use 'time' because it gave me more accurate values in general. 
* They tend to grep a subset of stdout to make things cleaner. For full output, run files individually.

Comment: write_fixed_len_pages, read_fixed_len_page. They have their own internal timers.
* All the files were tested with the same array of page sizes.

SPECIFICS ABOUT EXPERIMENTS

* Enumeration:
0     1     2
|-----|-----|----|... <-  All enumeration and ID's start at 0.

* Record identifiers:
Record identifiers take the following form: PAGEID.SLOTID
e.g. RID 5.1.

Therefore they must be feed using that format into whatever executable requires one.


==========================

DATA
* Three csv data sets were used for the whole testing: 2000, 500, 50.
* For example, we inserted all the data in set 500 into the heapfile that included the dataset 2000.
* These sample datasets were generated randomly and are included in the 'data' folder.

gen.py: This file generates a random csv data file (check code signature to understand behaviour).

==========================

STORAGE
* Used by the experiments to store / read the files generated by other experiments.

==========================

DESCRIPTION OF SELECTS.
* select selects a substring for an attribute from a heap oriented file.
* select2 selects a substring attribute from a column oriented set of files.
e.g. SELECT SUBSTRING(A, 1, 5) FROM T WHERE A >= start AND A <= end.

* select3 selects a substring for attribute B based on attribute A.
e.g. SELECT SUBSTRING(B, 1, 5) FROM T WHERE A >= start AND A <= end, (lexicographically).
